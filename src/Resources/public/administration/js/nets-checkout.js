(this.webpackJsonp=this.webpackJsonp||[]).push([["nets-checkout"],{Bhsu:function(e,t,s){"use strict";s.r(t);const n=Shopware.Classes.ApiService;var r=class extends n{constructor(e,t,s="nets"){super(e,t,s)}captureTransaction(e){const t=e.transactions.first(),s=e.id;return this.httpClient.post("/nets/transaction/charge",{params:{transaction:t,orderId:s}},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}refundTransaction(e){const t=e.transactions.first(),s=e.id;return this.httpClient.post("/nets/transaction/refund",{params:{transaction:t,orderId:s}},{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}};const{Application:i}=Shopware;i.addServiceProvider("NetsCheckoutApiPaymentService",e=>{const t=i.getContainer("init");return new r(t.httpClient,e.loginService)});var a=s("IWxP"),c=s.n(a);const{Component:o,Mixin:d}=Shopware;Shopware.Component.override("sw-order-user-card",{template:c.a,inject:["NetsCheckoutApiPaymentService"],mixins:[d.getByName("notification"),d.getByName("sw-inline-snippet")],data:()=>({disableCaptureButton:!1,disableRefundButton:!0,isLoading:!0}),methods:{captureOrder(e){let t=this;t.disableCaptureButton=!0,t.isLoading=!0,this.NetsCheckoutApiPaymentService.captureTransaction(e).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Capture processed successfully.")}),t.disableCaptureButton=!0,t.disableRefundButton=!1,t.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during capture.")}),t.disableCaptureButton=!1})},refundOrder(e){let t=this;t.disableRefundButton=!0,t.isLoading=!0,this.NetsCheckoutApiPaymentService.refundTransaction(e).then(()=>{this.createNotificationSuccess({title:this.$tc("Nets"),message:this.$tc("Refund processed successfully.")}),t.disableRefundButton=!0,t.isLoading=!1}).catch(e=>{this.createNotificationError({title:this.$tc("Nets"),message:this.$tc("Error occurred during refund")}),t.disableRefundButton=!1,t.isLoading=!1})},getTransactionId(e){var t=e.transactions.first(),s=!1;return t.hasOwnProperty("customFields")&&t.customFields&&t.customFields.hasOwnProperty("nets_easy_payment_details")&&t.customFields.nets_easy_payment_details&&(s=t.customFields.nets_easy_payment_details.transaction_id),s},canCapture(e){return 1!=this.disableCaptureButton&&e.transactions.first().customFields.nets_easy_payment_details.can_capture},canRefund(e){return 0==this.disableRefundButton||1!=this.disableRefundButton&&e.transactions.first().customFields.nets_easy_payment_details.can_refund}}});var u=s("fsN/"),l=s("r9K3");const{Module:p}=Shopware;p.register("nets-checkout",{type:"plugin",name:"NetsCheckout",title:"payone-payment.general.mainMenuItemGeneral",description:"payone-payment.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"default-action-settings",snippets:{"de-DE":u,"en-GB":l}})},IWxP:function(e,t){e.exports='{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\n        <div v-if="getTransactionId(currentOrder) != false">\n            <dt>{{ \'Nets Transaction id:\' }}</dt>\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\n            <dt>{{ \'Transaction Actions:\' }}</dt>\n        </div>\n    {% endblock %}\n\n\n    <template v-if="getTransactionId(currentOrder) != false">\n        <sw-button-process\n            @click="captureOrder(currentOrder)" :disabled="!canCapture(currentOrder)">\n            Capture Order\n        </sw-button-process>\n        <sw-button-process\n            @click="refundOrder(currentOrder)" :disabled="!canRefund(currentOrder)">\n            Refund Order\n        </sw-button-process>\n        <sw-loader v-if="isLoading"></sw-loader>\n    </template>\n{% endblock %}\n'},"fsN/":function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","general":{"mainMenuItemGeneral":"Nets","descriptionTextModule":"Einstellungen für Nets"},"capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"Nets"}}}')},r9K3:function(e){e.exports=JSON.parse('{"nets-checkout":{"title":"Nets","capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture processed successfully.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund processed successfully.","errorTitle":"Nets"}}}')}},[["Bhsu","runtime"]]]);